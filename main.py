# https://medium.com/swlh/telegram-bot-with-python-for-todoist-89d6cb13a04
# https://github.com/ieCecchetti/ToDo-bot-Telegram?ysclid=l66d94l5e9146289468
# https://pythobyte.com/building-a-chatbot-using-telegram-and-python-part-2-sqlite-databse-backend-m7o96jger-5e5fbcf0/?ysclid=l6a9jo72xv879672112

from telebot.callback_data import CallbackData, CallbackDataFilter
from telebot.custom_filters import AdvancedCustomFilter
from telebot import types, TeleBot
from config import BOT_API_TOKEN

import random_methods
import weather_api
from task_manager import db_manipulations
from joke_parser import print_joke

bot = TeleBot(BOT_API_TOKEN)


def main_menu_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    taskmanager_button = types.KeyboardButton('‚úÖ –¢–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä')
    weather_button = types.KeyboardButton('üå§Ô∏è –ü–æ–≥–æ–¥–∞')
    # chart_button = types.KeyboardButton('üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
    smth_button = types.KeyboardButton('–∫–æ—Ç–∏–∫ üêà')
    # test = types.KeyboardButton('test')
    joke_button = types.KeyboardButton('ü§£ –ê–Ω–µ–∫–¥–æ—Ç üòÇ')

    markup.row(taskmanager_button)
    markup.row(weather_button)  # , chart_button
    markup.row(smth_button, joke_button)

    return markup


@bot.message_handler(commands=['start'])
def start(message):
    mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!'
    bot.send_message(message.chat.id, mess, parse_mode='html')
    main_menu_buttons()
    try:
        create_new_user_tables(message)
    except Exception as _e:
        print("[Main error] button start: ", repr(_e))


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_new_user_tables(message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    try:
        operation = ['create_new_user', f'{user_id}', f'{user_first_name}']
        db_manipulations(operation)
    except Exception as _e:
        print("[Main error] into def create_new_user_tables: ", repr(_e))


@bot.message_handler(content_types=['text'])
def get_user_text(message):
    if message.text == "‚úÖ –¢–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä":
        bot.send_message(
            chat_id=message.chat.id,
            text='–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–ª–∞ –Ω–∞ –¥–µ–Ω—å!',
            reply_markup=task_menu_keyboard())

    elif message.text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞":
        bot.send_message(
            chat_id=message.chat.id,
            text='–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞',
            reply_markup=weather_menu_keyboard())

    # elif message.text == "üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    #
    #     weather_today = types.KeyboardButton('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')
    #     weather_week = types.KeyboardButton('–ö—É—Ä—Å –µ–≤—Ä–æ')
    #     back = types.KeyboardButton('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    #     markup.row(weather_today, weather_week)
    #     markup.row(back)
    #
    #     bot.send_message(message.chat.id,
    #                      "–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–±–æ–π –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç",
    #                      parse_mode='html',
    #                      reply_markup=markup)

    elif message.text == "–∫–æ—Ç–∏–∫ üêà":
        photo_name = random_methods.cats_photo_name(11, 36)
        img_kitty = open(photo_name, 'rb')
        bot.send_photo(message.chat.id, img_kitty)

    elif message.text == "ü§£ –ê–Ω–µ–∫–¥–æ—Ç üòÇ":
        some_joke = print_joke().format()
        bot.send_message(message.chat.id,
                         text=some_joke,
                         parse_mode='html')

    # elif message.text == "test":
    #     markup = types.ReplyKeyboardRemove(selective=False)
    #     bot.send_message(message.chat.id, message, reply_markup=markup)

    elif message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(message.chat.id,
                         "–≠—Ç–æ –º–µ–Ω—é –±–æ—Ç–∞, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
                         "‚úÖ –¢–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä: —ç—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª/–∑–∞–º–µ—Ç–æ–∫/–º—ã—Å–ª–µ–π. "
                         "–ó–∞–ø–∏—Å—ã–≤–∞–π —á—Ç–æ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å!\n\n"
                         "üå§Ô∏è –ü–æ–≥–æ–¥–∞: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–Ω–∞ —Ç—Ä–∏ –¥–Ω—è –≤–ø–µ—Ä–µ–¥\n\n"
                         "üêà –∫–æ—Ç–∏–∫: –ø–æ–∂–∞–ª—É–π, —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–¥–µ—Å—å –µ—Å—Ç—å))"
                         "ü§£ –ê–Ω–µ–∫–¥–æ—Ç üòÇ: –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç",
                         parse_mode='html',
                         reply_markup=main_menu_buttons())

    elif message.text.lower() == "test admin message":
        bot.send_message(message.chat.id, message)

    else:
        bot.send_message(message.chat.id,
                         "–≠—Ç–æ –º–µ–Ω—é –±–æ—Ç–∞, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
                         "‚úÖ –¢–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä: —ç—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª/–∑–∞–º–µ—Ç–æ–∫/–º—ã—Å–ª–µ–π. "
                         "–ó–∞–ø–∏—Å—ã–≤–∞–π —á—Ç–æ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å!\n\n"
                         "üå§Ô∏è –ü–æ–≥–æ–¥–∞: –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–Ω–∞ —Ç—Ä–∏ –¥–Ω—è –≤–ø–µ—Ä–µ–¥\n\n"
                         "üêà –∫–æ—Ç–∏–∫: –ø–æ–∂–∞–ª—É–π, —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–¥–µ—Å—å –µ—Å—Ç—å))"
                         "ü§£ –ê–Ω–µ–∫–¥–æ—Ç üòÇ: –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç",
                         parse_mode='html',
                         reply_markup=main_menu_buttons())


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
def weather_menu_keyboard():
    return types.InlineKeyboardMarkup(
        keyboard=[
            [types.InlineKeyboardButton(text='–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data="pogoda_today")],
            [types.InlineKeyboardButton(text='–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data="pogoda_week")],
            [types.InlineKeyboardButton(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå', callback_data="close_mess")]
        ]
    )


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
def task_menu_keyboard():
    return types.InlineKeyboardMarkup(
        keyboard=[
            [types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É ‚ûï', callback_data="add_task_to_db")],
            [types.InlineKeyboardButton(text='üóÇÔ∏è –°–ø–∏—Å–æ–∫ –¥–µ–ª üóÇÔ∏è', callback_data="print_task_list")],
            [types.InlineKeyboardButton(text='‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå', callback_data="close_mess")]
        ]
    )


def task_list_keyboard(tasks):
    task_list = types.InlineKeyboardMarkup(
        keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"{task[1]}",
                    callback_data=task_list_for_user.new(task_id=task[0])
                )
            ]
            for task in tasks

        ]

    )
    task_list.add(types.InlineKeyboardButton(
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚ùå",
        callback_data="close_tab"
    ))
    return task_list


task_list_for_user = CallbackData('task_id', prefix='task_number_')


class TasksCallbackFilter(AdvancedCustomFilter):
    key = 'config'

    def check(self, call: types.CallbackQuery, config: CallbackDataFilter):
        return config.check(query=call)


@bot.callback_query_handler(func=lambda call: call.data == 'print_task_list')
def print_task_inline_method(call: types.CallbackQuery):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–ü–æ–¥–æ–∂–¥–∏, –∑–∞–≥—Ä—É–∂–∞—é —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª..")

    try:
        operation = ['print_data', f'{call.from_user.id}']
        tasks = db_manipulations(operation)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.from_user.id,
                         text="--------------–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª--------------\n\n"
                              "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–º–µ—Ç–∫–∏ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ, "
                              "–±—É–¥—å –≤–Ω–∏–º–µ—Ç–µ–ª–Ω–µ–µ, –∏—Ö –Ω–µ–ª—å–∑—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!!",
                         reply_markup=task_list_keyboard(tasks))

    except Exception as _e:
        print("[Main error] get_user_task_list: ", repr(_e))


@bot.callback_query_handler(func=None, config=task_list_for_user.filter())
def delete_user_tasks(call: types.CallbackQuery):
    callback_data: dict = task_list_for_user.parse(callback_data=call.data)
    task_id = int(callback_data['task_id'])
    user_id = call.from_user.id

    operation = ['delete_data', f'{user_id}', f'{task_id}']
    tasks = db_manipulations(operation)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="~~~~~~~~~~~–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞~~~~~~~~~~~", reply_markup=task_list_keyboard(tasks))


@bot.callback_query_handler(func=lambda call: call.data == 'add_task_to_db')
def add_task_inline_method_del_msg(call: types.CallbackQuery):
    try:
        markup = types.InlineKeyboardMarkup()
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)

        markup.add(types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå",
            callback_data="cancel_inserting"
        ))
        msg = bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n\n\n"
                                                  "–ù–∞–∂–º–∏—Ç–µ –û–¢–ú–ï–ù–ê, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏!", reply_markup=markup)

        bot.register_next_step_handler(msg, get_new_users_task)

    except Exception as _e:
        print("[Main error] weather: ", repr(_e))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...", reply_markup=task_menu_keyboard())


# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Ç–∞–±–ª–∏—Ü—ã
def get_new_users_task(message):
    user_task_text = message.text

    if user_task_text.lower() == "–æ—Ç–º–µ–Ω–∞" or \
            user_task_text == "‚úÖ –¢–∞—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä" or \
            user_task_text == "üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç" or \
            user_task_text == "–∫–æ—Ç–∏–∫ üêà" or \
            user_task_text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or \
            user_task_text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞" or \
            user_task_text == "test" or \
            user_task_text == "ü§£ –ê–Ω–µ–∫–¥–æ—Ç üòÇ":
        bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
    else:
        operation = ['insert_data', f'{message.from_user.id}', f'{user_task_text}']
        db_manipulations(operation)
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        bot.send_message(message.from_user.id, '–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚ûï')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=None)
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)

    if call.data == 'pogoda_today':
        try:
            weath_text = weather_api.hours_weather()
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=weath_text, reply_markup=weather_menu_keyboard(), parse_mode='html')
        except Exception as _e:
            print("[Main error] weather: ", repr(_e))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...", reply_markup=weather_menu_keyboard())

    elif call.data == 'pogoda_week':
        try:
            weath_text = weather_api.weekday_weather()
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=weath_text, reply_markup=weather_menu_keyboard())
        except Exception as _e:
            print("[Main error] weather: ", repr(_e))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞...", reply_markup=weather_menu_keyboard())

    elif call.data == 'close_mess':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)

    elif call.data == 'close_tab':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif call.data == 'cancel_inserting':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)


if __name__ == '__main__':
    try:
        bot.add_custom_filter(TasksCallbackFilter())
        bot.infinity_polling(skip_pending=True)
    except Exception as e:
        print("[Main error] ", repr(e))
